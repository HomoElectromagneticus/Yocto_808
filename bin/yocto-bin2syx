#!/usr/bin/env ruby

# Yocto v1 sysex header
SYSEX_START = [0xf0, 0x7d, 0x08, 0x08, 0x02].pack('C*')
SYSEX_END = [0xf7].pack('C*')

# Yocto v1 bootloader commands
WRITE_PAGE = [0x7e, 0x00].pack('C*')
FINALIZE = [0x7f, 0x00].pack('C*')

# SPM page size for 1284P
PAGE_SIZE = 256

STDOUT.binmode
ARGF.binmode

ARGF.each_byte.each_slice(PAGE_SIZE) do |page|
  # Pad page with zeroes if necessary
  page += Array.new(PAGE_SIZE - page.size, 0)

  checksum = page.inject(0) { |s, x| (s + x) & 0xff }
  page << checksum

  print SYSEX_START
  print WRITE_PAGE
  page.each { |b| print [b >> 4, b & 0xf].pack('C*') }
  print SYSEX_END
end

print SYSEX_START
print FINALIZE
print SYSEX_END
